---
title: "ASAR DB content status"
author: "Anatoly Sorokin"
date: '`r format(Sys.time(), "%d.%m.%Y")`'
output:
  pdf_document:
    keep_tex: yes
    number_sections: yes
  html_document: default
params:
  format: !r if(opts_knit$get("rmarkdown.pandoc.to") == 'html') c('screen', 'print')
    else 'print'
  version: !r if(nchar(Sys.which("git"))) system("git describe --long --dirty --abbrev=10  --tags  --always",
    intern=TRUE) else date()
header-includes:
- \usepackage[T2A]{fontenc}
- \usepackage[utf8]{inputenc}
- \usepackage[english,russian]{babel}
- \usepackage{grffile}
- \usepackage{rotating}
- \usepackage{caption}
- \usepackage{longtable}
- \usepackage{lscape}
---
```{r loadPackages, include=FALSE, cache=FALSE}
## load additional packages in this chunk
library(pander)
library(knitr)
library(ggplot2)
library(xtable)
library(reportRx)
library(stringi)
library(plyr)
library(biomformat)
library(RJSONIO)
library(KEGGREST)
library(data.table)
library(DBI)
library(MonetDB.R)
numPrj<-165
numPrjpairs<-100
```

```{r setup, include=FALSE, cache=FALSE}
## This chunk should contain global configuration commands.
## Use this to set knitr options and related things. Everything
## in this chunk will be included in an appendix to document the
## configuration used.
#output <- opts_knit$get("rmarkdown.pandoc.to")
opts_knit$set(stop_on_error = 2L)

## By default R code is only included in HTML versions of the report
## (where it can be collapsed). You can generate a PDF version
## using rmarkdown::pdf_document to get a copy for print. Extensive
## chunks of R code may or may not be desired in /hat setting. If you
## want them simply change the following arguments to `echo = TRUE`.
## In either case the default can be overwritten for individual chunks.
#opts_chunk$set(echo = output=="html")
#opts_chunk$set(warning = output=="html")
#opts_chunk$set(message = output=="html")

## Cache options
opts_chunk$set(cache=FALSE)

## Figure options
## Set default figure format
#options(reportmd.figure.format=params$format)

## Set 'hide.fig.code' to FALSE to include code chunks that
## produce Figures in the output. Note that this affects all chunks
## that provide a figure caption.
opts_chunk$set(hold=TRUE, hide.fig.code=FALSE)

## Set up default plotting options for different formats.
## These can be overwritten for individual chunks
#interactiveFig()
#screenFig()
#printFig()

## Pander options
panderOptions("digits", 3)
panderOptions("table.split.table", 160)

## Configure Figure and Table lables
#options(figcap.prefix = "Figure", figcap.sep = ":", figcap.prefix.highlight = "**")
#options(tabcap.prefix = "Table", tabcap.sep = ":", tabcap.prefix.highlight = "**")

## Install required knitr hooks
#installHooks()
```

```{r functions, include=FALSE}
## Custom functions used in the analysis should go into this chunk.
## They will be listed in their own section of the appendix.
printProjectsTable <-
  function(mat,main,landscape = TRUE,digits = 0,sig = 0.01,align= 'lllrr') {
    addtorow          <- list()
    addtorow$pos      <- list()
    addtorow$pos[[1]] <- c(0)
    addtorow$command  <- c(
      paste(
        "\\hline \n",
        "\\endhead \n",
        "\\hline \n",
        "\\multicolumn{3}{l}{\\footnotesize Continued on next page} \n",
        "\\endfoot \n",
        "\\endlastfoot \n",sep = ""
      )
    )
    subset <- 'anode'
    if (landscape) {
      cat(
        sprintf(
          "\\newpage\n  \\begin{landscape} \n\\begin{center}\n\\captionof{table}{List of ASAR DB content, %s (%d projects)}\n\\scriptsize",
          main,dim(mat)[1]
        )
      )
    }else{
      cat(
        sprintf(
          "\\begin{center}\n\\captionof{table}{List of ASAR DB content, %s (%d projects)}\n\\scriptsize",
          main,dim(mat)[1]
        )
      )
    }
    alig <- 'lp{0.05\\linewidth}|lp{0.10\\linewidth}|p{0.65\\linewidth}|rp{0.10\\linewidth}|rp{0.10\\linewidth}'
    cat(dim(mat),names(mat),'\n')
    matU<-mat
    # matU$name<-sanitizestr(mat$name)
    # matU$description<-sanitizestr(mat$description)
    # cat(dim(matU),names(matU),'\n')
    print(
      xtable(
        matU,
        align = align,#paste(align,collapse = ''),
        digits = digits)
      ,size = "small",include.colnames = TRUE,
      tabular.environment = "longtable", sanitize.text.function=function(.x)sanitizestr(stri_escape_unicode(.x)),
      floating = FALSE,include.rownames = FALSE,add.to.row = addtorow,hline.after =
        c(-1)
    )
    if (landscape) {
      cat("\\end{center}\n \\end{landscape}")
    }else{
      cat("\\end{center}\n ")
    }
    
  }
```

```{r queries, include=FALSE}
## Custom functions used in the analysis should go into this chunk.
## They will be listed in their own section of the appendix.
taxStat<-paste("select count(distinct a.md5id) as cmd5",
               ",count(distinct usp) as cusp",
               ",count(distinct species) as cspecies",
               ",count(distinct genus) as cgenus",
               ",count(distinct family) as cfam",
               ",count(distinct ordr) as cord",
               ", count(distinct class) as cl ",
               "from abundance a ",
               "join md5_taxlite m on a.md5id=m.md5id ",
               "join taxlite t on m.taxliteid=t.id")
statTaxQtemplate<-paste("select st.smpl as smpl,count(distinct field) as cnt ",
                     "from (",
                     "select field,count(distinct sampleid) as smpl ",
#                     "select field,count(distinct sampleid) as smpl,sum(abundance) as abund, max(abundance) as maxab ",
                     "from abundance a join md5_taxlite m on a.md5id=m.md5id ",
                     "join taxlite t on m.taxliteid=t.id ",
                     "group by field",
                     ") st ",
                     "group by smpl ",
                     "order by smpl")
pairStatTaxMD5Qtemplate<-paste("select st.smpl as smpl,count(*) as cnt  ",
                               "from ( ",
                               "select field,a.md5id,",
                               "count(distinct sampleid) as smpl",
                               #",sum(abundance) as abund",
                               #", max(abundance) as maxab  ",
                               "from abundance a join ",
                               "md5_taxlite m on a.md5id=m.md5id  ",
                               "join taxlite t on m.taxliteid=t.id  ",
                               "group by field,a.md5id ",
                               ") st  ",
                               "group by smpl  order by smpl;")
taxQtemplate<-paste("select field,count(distinct sampleid) as smpl, count(distinct a.md5id) as md5 ",
#                     "select field,count(distinct sampleid) as smpl,sum(abundance) as abund, max(abundance) as maxab ",
                     "from abundance a join md5_taxlite m on a.md5id=m.md5id ",
                     "join taxlite t on m.taxliteid=t.id ",
                     "group by field")
domTaxQ<-gsub('field','dom',taxQtemplate)
speciesQ<-gsub('field','species',statTaxQtemplate)
genusQ<-gsub('field','genus',statTaxQtemplate)
familyQ<-gsub('field','family',statTaxQtemplate)
classQ<-gsub('field','class',statTaxQtemplate)
phylumQ<-gsub('field','phylum',statTaxQtemplate)
domQ<-gsub('field','dom',statTaxQtemplate)
ordrQ<-gsub('field','ordr',statTaxQtemplate)
uspQ<-gsub('field','usp',statTaxQtemplate)

speciesmd5Q<-gsub('field','species',pairStatTaxMD5Qtemplate)

pairSpeciemd5Q<-paste("select distinct species,a.md5id,fun4,smpl,abund",
                      "from (select species,a.md5id",
                               ",count(distinct sampleid) as smpl",
                               ",sum(abundance) as abund",
                               #", max(abundance) as maxab  ",
                               "from abundance a join ",
                               "md5_taxlite m on a.md5id=m.md5id  ",
                               "join taxlite t on m.taxliteid=t.id ",
                               "group by species,a.md5id ",
                      "having count(distinct sampleid)>?",
                      ") a ",
                      "left join seedlite_md5 sm on a.md5id=sm.md5id",
                      "left join seedlite s on sm.seedliteid=s.id",
                       "order by abund desc,md5id,species")
frequentSpeciesQ<-paste("select count(distinct sampleid) as smpl,species,sum(abundance) as abund,",
                        "count(distinct a.md5id) as numseq, max(abundance) as maxab ",
                        " from abundance a join md5_taxlite m on a.md5id=m.md5id  ",
                        "join taxlite t on m.taxliteid=t.id  group by species",
                        "having count(distinct sampleid)>?",
                        "order by numseq desc")

md5Q<-paste("select st.smpl as smpl,count(distinct md5id) as cnt ",
                     "from (",
                     "select md5id,count(distinct sampleid) as smpl",
                     "from abundance a",
                     "group by md5id",
                     ") st ",
                     "group by smpl ",
                     "order by smpl")

samplesQ<-"select smpl as id,name,cnt,abundance from mv_smpl_stat"
prjQ<-paste("select project as prjID,stname as project,sum(cnt) as cnt,sum(abundance) as abundance ",
            "from mv_smpl_stat ",
            "group by stname,project",
            "order by abundance")
```

```{r db.con, include=FALSE}
## Custom functions used in the analysis should go into this chunk.
## They will be listed in their own section of the appendix.
dbname<-'asar'
usr<-'asar'
pwd<-'asar'
```

# Read data
Before running the code a number of variables should be setted for appropriate data loading:
 
 3. the name of the database *dbname*
 4. user/password for teh database: *usr* and *pwd*
 
```{r check.values}
if(!(exists('dbname')&
     exists('usr')&
     exists('pwd'))){
  stop('not all obligatory parameters are provided\n')
}
```


# Connect to DB
```{r db.connect}
conn <- dbConnect(MonetDB.R::MonetDB(), 
                  dbname = dbname,
                  user=usr,password=pwd,timeout=6400)
```

# Analyse database statics

## Basic content
```{r projects.table,warning=FALSE,results='asis'}
mat<-dbGetQuery(conn,prjQ)
printProjectsTable(mat,main = 'Projects',landscape = FALSE)
```


```{r prj.hist}
qplot(cnt,data = mat,main='Sequence count in projects')
qplot(abundance,data = mat,main='Sequence abundances in projects')
```

```{r smpl.table,warning=FALSE,results='asis'}
mat<-dbGetQuery(conn,samplesQ)
printProjectsTable(mat,main = 'Samples',landscape = FALSE)
```

```{r smpl.hist}
qplot(cnt,data = mat,main='Sequence count in samples')
qplot(abundance,data = mat,main='Sequence abundances in samples')
```


## Sequences

```{r get.sequences.frequency,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,md5Q)
```

```{r plot.sequences.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+
  geom_col()+
  scale_y_log10()+
  ggtitle('Sequences')
```


## Taxonomy

```{r get.tax.stat,cache=FALSE}
seqData<-dbGetQuery(conn,taxStat)
```

```{r tax.stat.table}
tbl<-t(seqData)
rownames(tbl)<-c('Number sequences',
                 'Number USPs',
                 'Number Species',
                 'Number Genera',
                 'Number Families',
                 'Number Orders',
                 'Number Classes')
names(tbl)<-c('Count')
pander(tbl)
```

### USP

```{r get.usp.frequency,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,uspQ)
```
```{r plot.usp.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('USP')
```

### Species

```{r get.species.frequency,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,speciesQ)
```
```{r plot.species.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Species')
```
```{r get.most.frequent.specie.md5.pair,cache=FALSE}
seqData<-dbGetQuery(conn,pairSpeciemd5Q,numPrjpairs)
```

```{r most.frequent.specie.md5.pair.table,warning=FALSE,results='asis'}
#al<-c('l|','lp{0.15\\linewidth}|','l|','p{0.55\\linewidth}|','r|','r|')
al<-'l|p{3cm}|l|p{5cm}|r|r|'
#printProjectsTable(seqData,main = 'Frequent Species',landscape = TRUE,align = al)#'llllrr')
pairData<-seqData
```

```{r most.frequent.selected.specie.md5.pair.table,warning=FALSE,results='asis'}
genera<-c('Geobacter','Pelobacter','Desulfovibrio','Shewanella')
for(g in genera){
  cat("\\hypertarget{",tolower(g),"}{%\n\\paragraph{",g,"}\\label{",tolower(g),"}}\n")
  idx<-with(pairData,grep(g,species))
  pairD<-pairData[idx,]
  print(qplot(smpl,data=pairD,main=g,binwidth=1))
  print(qplot(abund,data=pairD,main=g))
  print(qplot(abund,data=pairD,log='xy',main=g))
  print(qplot(abund,smpl,data=pairD,log='x',main=g))
  printProjectsTable(pairD,main = paste(g,' Species'),landscape = FALSE,align = al)#'llllrr')
}
```


```{r get.most.frequent.specie,cache=FALSE}
seqData<-dbGetQuery(conn,frequentSpeciesQ, numPrj)
```

```{r most.frequent.specie.table,warning=FALSE,results='asis'}
printProjectsTable(seqData,main = 'Frequent Species',landscape = FALSE,align = 'lllrrr')
```

```{r most.frequent.specie.reorder.table,warning=FALSE,results='asis'}
idx<-with(seqData,order(abund,numseq,maxab,decreasing = TRUE))
printProjectsTable(seqData[idx[1:100],],main = 'Frequent Species (ordered)',landscape = FALSE,align = 'lllrrr')
```


### Genus

```{r get.genus.frequency,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,genusQ)
```
```{r plot.genus.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Genus')
```

### Family

```{r get.family.frequency,eval=TRUE,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,familyQ)
```
```{r plot.family.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Family')
```

### Order

```{r get.ordr.frequency,eval=TRUE,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,ordrQ)
```
```{r plot.ordr.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Order')
```

### Class

```{r get.class.frequency,eval=TRUE,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,classQ)
```
```{r plot.class.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Class')
```

### Phylum

```{r get.phylum.frequency,eval=TRUE,warning=FALSE,results='asis',cache=FALSE}
seqData<-dbGetQuery(conn,phylumQ)
```
```{r plot.phylum.frequency,eval=TRUE}
ggplot(data=seqData,aes(x=smpl,y=cnt))+geom_col()+ggtitle('Phylum')
```

### Domain

```{r get.most.frequent.dom,cache=FALSE}
seqData<-dbGetQuery(conn,domTaxQ)
```

```{r most.frequent.dom.table,warning=FALSE,results='asis'}
printProjectsTable(seqData,main = 'Frequent Species',landscape = FALSE,align = 'l|p{5cm}|r|r|')
```

## KEGG

## SEED


# Close connection
```{r disconnect}
dbDisconnect(conn)
```


# Appendix {.tabset}
## Functions
```{r functions, eval=FALSE, include=TRUE}
```
## Queries
```{r queries, eval=FALSE, include=TRUE}
```

## Setup R
```{r setup, eval=FALSE}
```

## Versions
### Document version
```{r docVersion, echo=FALSE, results='asis', cache=FALSE}
cat(params$version)
```

### Session Info
```{r sessionInfo, echo=FALSE, results='asis', class='text', warning=FALSE}
pander(devtools::session_info())
```

