---
title: "Analysis of SW with 3D heatmap"
author: "Анатолий Сорокин"
date: '`r format(Sys.time(), "%d.%m.%Y")`'
output:
  pdf_document:
    keep_tex: yes
    number_sections: yes
  html_document:
    keep_md: yes
params:
  version: !r system("git describe --long --dirty --abbrev=10  --tags  --always", intern=TRUE)
header-includes:
- \usepackage[T2A]{fontenc}
- \usepackage[utf8]{inputenc}
- \usepackage[english,russian]{babel}
- \usepackage{grffile}
- \usepackage{rotating}
- \usepackage{caption}
- \usepackage{longtable}
- \usepackage{lscape}
---
```{r loadPackages, include=FALSE, cache=FALSE}
## load additional packages in this chunk
library(pander)
library(knitr)
library(ggplot2)
library(igraph)
library(taxize)
library(xtable)
library(data.table)
```
```{r setup, include=FALSE, cache=FALSE}
## This chunk should contain global configuration commands.
## Use this to set knitr options and related things. Everything
## in this chunk will be included in an appendix to document the
## configuration used.
#output <- opts_knit$get("rmarkdown.pandoc.to")

## By default R code is only included in HTML versions of the report
## (where it can be collapsed). You can generate a PDF version
## using rmarkdown::pdf_document to get a copy for print. Extensive
## chunks of R code may or may not be desired in /hat setting. If you
## want them simply change the following arguments to `echo = TRUE`.
## In either case the default can be overwritten for individual chunks.
#opts_chunk$set(echo = output=="html")
#opts_chunk$set(warning = output=="html")
#opts_chunk$set(message = output=="html")

## Cache options
opts_chunk$set(cache=TRUE)

## Figure options
## Set default figure format
#options(reportmd.figure.format=params$format)

## Set 'hide.fig.code' to FALSE to include code chunks that
## produce Figures in the output. Note that this affects all chunks
## that provide a figure caption.
opts_chunk$set(hold=TRUE, hide.fig.code=FALSE)

## Set up default plotting options for different formats.
## These can be overwritten for individual chunks
#interactiveFig()
#screenFig()
#printFig()

## Pander options
panderOptions("digits", 3)
panderOptions("table.split.table", 160)

## Configure Figure and Table lables
#options(figcap.prefix = "Figure", figcap.sep = ":", figcap.prefix.highlight = "**")
#options(tabcap.prefix = "Table", tabcap.sep = ":", tabcap.prefix.highlight = "**")

## Install required knitr hooks
#installHooks()
old.o <- options(warn = -1)
```

```{r functions, include=TRUE,child='mmnet.functions.Rmd'}
```

# Load NCBI Taxdump files

```{r load.taxdump}
nodes<-read.delim('~/Downloads/new_taxdump/nodes.dmp',header=FALSE,sep='|')
names(nodes)<-c('tax_id',
                'parent_tax_id','rank','embl_code',
                'division_id','inherited_div_flag',
                'genetic_code_id','inherited_GC_flag',
                'mitochondrial_genetic_code_id',
                'inherited_MGC_flag','GenBank_hidden_flag',
                'hidden_subtree_root_flag','comments')
nodes$rank<-gsub('\t','',nodes$rank)
nodes$comments<-gsub('\t','',nodes$comments)
nodes$embl_code<-gsub('\t','',nodes$embl_code)
nodes<-nodes[,!is.na(names(nodes))]
```

```{r load.names}
names<-read.delim('~/Downloads/new_taxdump/names.dmp',header=FALSE,sep='|')
names(names)<-c('tax_id','name_txt','unique_name','name_class')
names$name_txt<-gsub('\t','',names$name_txt)
names$name_class<-gsub('\t','',names$name_class)
names$unique_name<-gsub('\t','',names$unique_name)
```

```{r add.names.to.nodes}
snames<-subset(names,name_class=='scientific name')
idx<-match(snames$tax_id,nodes$tax_id)
nodes$sname[idx]<-snames$name_txt
nodes$uname[idx]<-snames$unique_name
```

```{r make.graph}
nd<-nodes[,-2]
tree<-graph.data.frame(d=nodes[,c(1,2)],directed=TRUE,vertices=nd)
top<-make_ego_graph(tree,order = 2,nodes=V(tree)[1],mode='in')[[1]]
V(top)$sname[is.na(V(top)$sname)]<-'NA'
plot(top,vertex.label=V(top)$sname,vertex.size=5)
```

```{r remove.unrequired}
clTree1<-delete.vertices(tree,
                         v=unlist(ego(tree,
                                      order = diameter(tree),
                                      nodes=V(tree)[grep('(unclassified sequences|Viroids|other sequences)',
                                                         V(tree)$sname)],
                                      mode='in')))
clTree2<-delete.vertices(clTree1,
                         v=unlist(ego(clTree1,
                                      order = diameter(clTree1),
                                      nodes=V(clTree1)[grep('Eukaryota',
                                                         V(clTree1)$sname)],
                                      mode='in')))
cellOrgTree<-make_ego_graph(clTree2,
                            order = diameter(clTree2),
                            nodes=grep('cellular organisms',
                                       V(clTree2)$sname),mode='in')[[1]]
```

```{r plot.trees}
clTop1<-make_ego_graph(clTree1,order = 2,nodes=V(clTree1)[1],mode='in')[[1]]
plot(clTop1,vertex.label=V(clTop1)$sname,vertex.size=5)
clTop2<-make_ego_graph(clTree2,order = 2,nodes=V(clTree2)[1],mode='in')[[1]]
plot(clTop2,vertex.label=V(clTop2)$sname,vertex.size=5)
clTopB<-make_ego_graph(clTree2,order = 2,nodes=grep('Bacteria',V(clTree2)$sname),mode='in')[[1]]
plot(clTopB,vertex.label=V(clTopB)$sname,vertex.size=5)
```

# Clean lineage
```{r plot.lineage}
linG<-make_ego_graph(cellOrgTree,
                       nodes=V(cellOrgTree)[grep('Escherichia coli',
                                                 V(cellOrgTree)$sname)[1]],
                       order = diameter(cellOrgTree),
                     mode = 'out')[[1]]
plot(linG,vertex.label=V(linG)$uname,vertex.size=5)
```

# Приложения {.tabset}
## Функции
```{r functions, eval=FALSE, include=TRUE}
```


## Конфигурация R
```{r setup, eval=FALSE}
```

## Версии
### Версия документа
```{r docVersion, echo=FALSE, results='asis', cache=FALSE}
cat(params$version)
```

### Session Info
```{r sessionInfo, echo=FALSE, results='asis', class='text', warning=FALSE}
pander(devtools::session_info())
options(old.o)
```

